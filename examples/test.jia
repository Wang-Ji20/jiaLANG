
int ass(int a, int b){
    int dhhh[3];
    dhhh[0] = b;
    return dhhh[0];
}

int addr(int a){
    return *(&a);
}

int iadd(int a, int b){
    int v = 3;
    return a + b;
}

float ffadd(float a, float b){
    return a + b;
}

int complex_comp(int a, int b, int c, int d){
    return (a + b) * c % d;
}

int always10(int v){
    int r;
    r = 10;
    return r;
}

int myabs(int a){
    int b;
    if(a < 0){
        b = -a;
    }
    else{
        b = a;
    }
    return b;
}

int mygcd(int a, int b){
    int c;
    c = a % b;
    while(c != 0){
        a = b;
        b = c;
        c = a % b;
    }
    return b;
}

int breakandcall(){
    int h;
    while(1){
        h = mygcd(always10(1) - 1, always10(1) + 2);
        if(h == 3){
            break;
        }
        else{
            continue;
        }
    }
    return h;
}

int arraysum(int arr[5], int n){
    int b;
    b = 0;
    while (n > -1)
    {
        b = b + arr[n];
        n = n - 1;
    }
    return b;
}

int copyarr(int src[5], int dst[5]){
    int n;
    n = 0;
    while (n < 5)
    {
        dst[n] = src[n];
        n = n + 1;
    }
    return dst[0];
}

int kmp(char txt[100], int txtlen, char pat[100], int patlen, int ans[100])
{
    int pi[1000];
    int i;
    int j;
    int cnt;
    pi[0] = 0;
    i = 1;
    j = 0;
    while (i <= patlen) {
        while (j > 0 && (pat[i] != pat[j])) {
            j = pi[j - 1];
        }
        if (pat[i] == pat[j]) {
            j = j + 1;
        }
        else {}
        pi[i] = j;
        i = i + 1;
    }
    cnt = 0;
    i = 0;
    while (i < 100) {
        ans[i] = -1;
        i = i + 1;
    }
    i = 0;
    j = 0;
    while (i < txtlen) {
        while (j > 0 && (txt[i] != pat[j])) {
            j = pi[j - 1];
        }
        if (txt[i] == pat[j]) {
            j = j + 1;
        }
        else {}
        if (j == patlen) {
            ans[cnt] = i - patlen + 1;
            cnt = cnt + 1;
            j = pi[j];
        }
        else {}
        i = i + 1;
    }
    return 0;
}

void sort(int nums[100], int len) {
    int i;
    int j;
    int tmp;
    j = len - 1;
    while (j > 0) {
        i = 0;
        while (i < j) {
            if (nums[i] > nums[i + 1]) {
                tmp = nums[i];
                nums[i] = nums[i + 1];
                nums[i + 1] = tmp;
            }
            else {}
            i = i + 1;
        }
        j = j - 1;
    }
    return;
}